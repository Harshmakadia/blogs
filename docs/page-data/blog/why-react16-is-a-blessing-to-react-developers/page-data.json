{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/why-react16-is-a-blessing-to-react-developers","webpackCompilationHash":"9d9ec28c2683948febbe","result":{"data":{"markdownRemark":{"excerpt":"Just like how people are excited about updating their mobile apps and OS, developers should also be excited to update their frameworks. The‚Ä¶","html":"<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*YG3-T77xGBfKDn5SfE6P8w.jpeg\"></p>\n<p>Just like how people are excited about updating their mobile apps and OS, developers should also be excited to update their frameworks. The new version of the different frameworks come with new features and tricks out of the box.</p>\n<p>Below are some of the good features you should consider when migrating your existing app to React 16 from React 15.</p>\n<blockquote>\n<p> <em>Time to say Goodbye React15 üëã</em></p>\n</blockquote>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" aria-label=\"Error Handling permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Handling</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2504/1*UH_OYTog9NJi3o3kooA_vg.gif\" alt=\"Error Handling be like :)\"></p>\n<p>React 16 introduces the new concept of an <em>error boundary</em>.</p>\n<p>Error boundaries are React components that <strong>catch JavaScript errors anywhere in their child component tree. They log those errors, and display a fallback UI</strong> instead of the crashed component tree. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.</p>\n<p>A class component becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error, info):</p>\n <iframe src=\"https://medium.com/media/f9989253dd0ae70b259de0a805272a90\" frameborder=0></iframe>\n<p>Then you can use it as a regular component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;ErrorBoundary&gt;\n   &lt;MyWidget /&gt;\n&lt;/ErrorBoundary&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>The componentDidCatch() method works like a JavaScript catch {} block, but for components. Only class components can be error boundaries. In practice, most of the time you‚Äôll want to declare an error boundary component once. Then you‚Äôll use it throughout your application.</p>\n<p>Note that <strong>error boundaries only catch errors in the components below them in the tree</strong>. An error boundary can‚Äôt catch an error within itself. If an error boundary fails trying to render the error message, the error will propagate to the closest error boundary above it. This, too, is similar to how catch {} block works in JavaScript.</p>\n<p>Check out the live demo:</p>\n <iframe src=\"https://medium.com/media/9a8388d780d16bcded727affd1e777d8\" frameborder=0></iframe>\n<p>For more information on error handling, head <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">here</a>.</p>\n<h2 id=\"New-render-return-types-fragments-and-strings\"><a href=\"#New-render-return-types-fragments-and-strings\" aria-label=\"New render return types fragments and strings permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New render return types: fragments and strings</h2>\n<p>Get rid of wrapping the component in a div while rendering.</p>\n<p>You can now return an array of elements from a component‚Äôs render method. Like with other arrays, you‚Äôll need to add a key to each element to avoid the key warning:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">render() {\n  // No need to wrap list items in an extra element!\n  return [\n    // Don&#39;t forget the keys :)\n    &lt;li key=&quot;A&quot;&gt;First item&lt;/li&gt;,\n    &lt;li key=&quot;B&quot;&gt;Second item&lt;/li&gt;,\n    &lt;li key=&quot;C&quot;&gt;Third item&lt;/li&gt;,\n  ];\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html\">Starting with React 16.2.0</a>, it has support for a special fragment syntax to JSX that doesn‚Äôt require keys.</p>\n<p>Support for returning strings :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">render() {\n  return &#39;Look ma, no spans!&#39;;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"Portals\"><a href=\"#Portals\" aria-label=\"Portals permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Portals</h2>\n<p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">ReactDOM.createPortal(child, container)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The first argument (child) is any <a href=\"https://reactjs.org/docs/react-component.html#render\">renderable React child</a>, such as an element, string, or fragment. The second argument (container) is a DOM element.</p>\n<h3 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" aria-label=\"How to use it permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>How to use it</strong></h3>\n<p>When you return an element from a component‚Äôs render method, it‚Äôs mounted into the DOM as a child of the nearest parent node:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">render() {\n  // React mounts a new div and renders the children into it\n  return (\n    &lt;div&gt;\n      {this.props.children}\n    &lt;/div&gt;\n  );\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Sometimes it‚Äôs useful to insert a child into a different location in the DOM:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">render() {\n  // React does *not* create a new div. It renders the children into `domNode`.\n  // `domNode` is any valid DOM node, regardless of its location in the DOM.\n  return ReactDOM.createPortal(\n    this.props.children,\n    domNode\n  );\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A typical use case for portals is when a parent component has an overflow: hidden or z-index style, but you need the child to visually ‚Äúbreak out‚Äù of its container. For example, dialogs, hovercards, and tooltips.</p>\n <iframe src=\"https://medium.com/media/014a26bbecdc33d8973c5710dd16e25e\" frameborder=0></iframe>\n<h2 id=\"Custom-DOM-Attribute\"><a href=\"#Custom-DOM-Attribute\" aria-label=\"Custom DOM Attribute permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom DOM Attribute</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*6h94cJ7rOVdaykMmyhOvhg.png\"></p>\n<p>React15 used to ignore any unknown DOM attributes. It would just skip them since React didn‚Äôt recognize it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// Your code:\n&lt;div mycustomattribute=&quot;something&quot; /&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Would render an empty div to the DOM with React 15:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// React 15 output:\n&lt;div /&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>In React16, the output will be the following (<em>custom attributes will be shown and not be ignored at all</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// React 16 output:\n&lt;div mycustomattribute=&quot;something&quot; /&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2 id=\"Avoid-Re-render-with-setting-NULL-in-state\"><a href=\"#Avoid-Re-render-with-setting-NULL-in-state\" aria-label=\"Avoid Re render with setting NULL in state permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoid Re-render with setting NULL in state</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*mDNqHOCtoVeKTPR4gtfP2Q.png\"></p>\n<p>With React16 you can prevent state updates and re-renders right from setState(). You just need to have your function return null.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const MAX_PIZZAS = 20;\n\nfunction addAnotherPizza(state, props) {\n  // Stop updates and re-renders if I&#39;ve had enough pizzas.\n  if (state.pizza === MAX_PIZZAS) {\n    return null;\n  }\n\n  // If not, keep the pizzas coming! :D\n  return {\n    pizza: state.pizza + 1,\n  }\n}\n\nthis.setState(addAnotherPizza);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Read more <a href=\"https://x-team.com/blog/react-render-setstate/\">here</a>.</p>\n<h2 id=\"Creating-Refs\"><a href=\"#Creating-Refs\" aria-label=\"Creating Refs permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Refs</h2>\n<p>Creating refs with React16 is now much easier. Why you need to use refs:</p>\n<ul>\n<li>Managing focus, text selection, or media playback.</li>\n<li>Triggering imperative animations.</li>\n<li>Integrating with third-party DOM libraries.</li>\n</ul>\n<p>Refs are created using React.createRef() and are attached to React elements via the refattribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() {\n    return &lt;div ref={this.myRef} /&gt;;\n  }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"Accessing-Refs\"><a href=\"#Accessing-Refs\" aria-label=\"Accessing Refs permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Accessing Refs</strong></h3>\n<p>When a ref is passed to an element in render, a reference to the node becomes accessible at the current attribute of the ref.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const node = this.myRef.current;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The value of the ref differs depending on the type of the node:</p>\n<ul>\n<li>When the ref attribute is used on an HTML element, the ref created in the constructor with React.createRef() receives the underlying DOM element as its current property.</li>\n<li>When the ref attribute is used on a custom class component, the ref object receives the mounted instance of the component as its current.</li>\n<li><strong>You may not use the ref attribute on functional components</strong> because they don‚Äôt have instances.</li>\n</ul>\n<h2 id=\"Context-API\"><a href=\"#Context-API\" aria-label=\"Context API permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context API</h2>\n<p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p>\n<h3 id=\"ReactcreateContext\"><a href=\"#ReactcreateContext\" aria-label=\"ReactcreateContext permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.createContext</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const {Provider, Consumer} = React.createContext(defaultValue);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Creates a { Provider, Consumer } pair. When React renders a context Consumer, it will read the current context value from the closest matching Provider above it in the tree.</p>\n<p>The defaultValue argument is <strong>only</strong> used by a Consumer when it does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them. Note: passing undefined as a Provider value does not cause Consumers to use defaultValue.</p>\n<h3 id=\"Provider\"><a href=\"#Provider\" aria-label=\"Provider permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;Provider value={/* some value */}&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>A React component that allows Consumers to subscribe to context changes.</p>\n<p>Accepts a value prop to be passed to Consumers that are descendants of this Provider. One Provider can be connected to many Consumers. Providers can be nested to override values deeper within the tree.</p>\n<h3 id=\"Consumer\"><a href=\"#Consumer\" aria-label=\"Consumer permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consumer</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;Consumer&gt;\n  {value =&gt; /* render something based on the context value */}\n&lt;/Consumer&gt;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>A React component that subscribes to context changes.</p>\n<p>Requires a <a href=\"https://reactjs.org/docs/render-props.html#using-props-other-than-render\">function as a child</a>. The function receives the current context value and returns a React node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().</p>\n<h2 id=\"static-getDerivedStateFromProps\"><a href=\"#static-getDerivedStateFromProps\" aria-label=\"static getDerivedStateFromProps permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static getDerivedStateFromProps()</h2>\n<p>getDerivedStateFromProps is invoked right before calling the render method. Both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing.</p>\n<p>This method exists for <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\">rare use cases</a> where the state depends on changes in props over time. For example, it might be handy for implementing a <Transition> component that compares its previous and next children to decide which of them to animate in and out.</p>\n<p>Deriving state leads to verbose code and makes your components difficult to think about.</p>\n<p><a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\">Make sure you‚Äôre familiar with simpler alternatives:</a></p>\n<ul>\n<li>If you need to <strong>perform a side effect</strong> (for example, data fetching or an animation) in response to a change in props, use <a href=\"https://reactjs.org/docs/react-component.html#componentdidupdate\">componentDidUpdate</a> lifecycle instead.</li>\n<li>If you want to <strong>re-compute some data only when a prop changes</strong>, <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">use a memoization helper instead</a>.</li>\n<li>If you want to <strong>‚Äúreset‚Äù some state when a prop changes</strong>, consider either making a component <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">fully controlled</a> or <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">fully uncontrolled with a key</a> instead.</li>\n</ul>\n<p>This method doesn‚Äôt have access to the component instance. If you‚Äôd like, you can reuse some code between getDerivedStateFromProps() and the other class methods by extracting pure functions of the component props and state outside the class definition.</p>\n<p>Note that this method is fired on <em>every</em> render, regardless of the cause. This is in contrast to UNSAFE_componentWillReceiveProps. It only fires when the parent causes a re-render and not as a result of a local setState.</p>\n<p>We compare nextProps.someValue with this.props.someValue. If both are different then we perform some operation, setState</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">static getDerivedStateFromProps(nextProps, prevState){   if(nextProps.someValue!==prevState.someValue){\n   return { someState: nextProps.someValue};\n} else return null;}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>It receives two params nextProps and prevState. As mentioned previously, you cannot access this inside this method. You‚Äôll have to store the props in the state to compare the nextProps with previous props. In above code nextProps and prevState are compared. If both are different then an object will be returned to update the state. Otherwise null will be returned indicating state update not required. If state changes then componentDidUpdate is called where we can perform the desired operations as we did in componentWillReceiveProps.</p>\n<h2 id=\"Bonus-React-Lifecycle-events\"><a href=\"#Bonus-React-Lifecycle-events\" aria-label=\"Bonus React Lifecycle events permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bonus: React Lifecycle events</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*6sVjMFCtW_dS_2MserkyQw.jpeg\"></p>\n<p>Lifecycle credits ‚Äî <a href=\"https://twitter.com/dceddia\">https://twitter.com/dceddia</a></p>\n<p>Well these are some of the features that you should definitely try while working with React16!</p>\n<p>Happy coding üíª üòÄ</p>","timeToRead":8,"id":"75f8b2b5-6dff-59a3-914b-61c0364a5782","frontmatter":{"date":"September 13, 2019","title":"Why React16 is a blessing to React developers","folder":"/blog/7-react-16","ogimage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/why-react16-is-a-blessing-to-react-developers"}}}