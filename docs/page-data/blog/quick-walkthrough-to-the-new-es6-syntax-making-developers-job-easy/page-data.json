{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/quick-walkthrough-to-the-new-es6-syntax-making-developers-job-easy","webpackCompilationHash":"9d9ec28c2683948febbe","result":{"data":{"markdownRemark":{"excerpt":"1. Arrow Functions\nAlso know as fat function allows a developer to accomplish the same result with fewer lines of code and approximatelyâ€¦","html":"<p> <strong>1. Arrow Functions</strong>\nAlso know as fat function allows a developer to accomplish the same result with fewer lines of code and approximately half of the typing.These function expressions are best suited for non-method functions, and they cannot be used as constructors.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*X6ishTqTuljQ76RxajGr3A.png\"></p>\n<p><strong>2.Array Element Finding</strong>\nHere is some cool trick for developer looking for the easiest way to find some elements in an array. ES6 provides 2 new Array methods find() and findIndex(). find() always returns the first element which satisfies the condition mentioned for finding some elements.</p>\n<p>In the below example <strong>*find() *</strong>method returns the first element which matches the condition where element is equal to *b. <strong>findIndex() *</strong>returns the position where the element is found and returns *-1 *if it fails to find the given element.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2032/1*Wdk1bGNQm1fbQPHNU6wQ-g.png\" alt=\"find() and findIndex()\"></p>\n<p><strong>3. let and const</strong>\nThe difference between let and const is that once you bind a value/object to a variable using const, you can't reassign to that variable.</p>\n<p>let â€”use block scope in programming.\nconst â€” immutable with variables.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*yuKwKq1wdODOC9Do3dappw.png\" alt=\"let vs const\"></p>\n<p><strong>4. Promises</strong>\nPromises give us a way to handle asynchronous processing in a more synchronous fashion.</p>\n<p><strong>Creating Promises</strong>\nThe standard way to create a Promise is by using the new Promise constructor which accepts a handler that is given two functions as parameters. The first handler (<em>typically named</em> resolve) is a function to call with the future value when it's ready; and the second handler (<em>typically named</em> reject) is a function to call to reject the Promise if it can't resolve the future value.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2616/1*UFHhY-NVvh5E3826UX3zww.png\" alt=\"creating promise\"></p>\n<p><em>Promise</em> itself has one of the following three states:</p>\n<ol>\n<li>Pending - until a Promise is fulfilled it is in pending state</li>\n<li>Fulfilled - when the first handler is called the Promise is considered fulfilled with the value passed to that handler.</li>\n<li>Rejected - if the second handler is called, the Promise is considered rejected with the value passed to that handler.</li>\n</ol>\n<p><strong>Consuming Promises</strong>\nA Promiseâ€™s .then() method actually takes two possible parameters. The first is the function to be called when the Promise is fulfilled and the second is a function to be called if the Promise is rejected.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2456/1*NBtobgIanwIKqHYwwws3IA.png\" alt=\"output from promise\"></p>\n<p><strong>5. Spread Operator</strong>\nspread operator (â€¦) comes to handy when you want to do some quick operations on array like combining, copying, adding element at first/last position of array.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2916/1*c5uPvLVpMdOQYOFqfaaiMA.png\"></p>\n<p><strong>6. Template Literals</strong>\nTemplate literals or interpolation in other languages is a way to output variables in the string. So in ES5 we had to break the string. And in ES6 new syntax ${NAME} inside of the back-ticked string makes things go easy.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2764/1*VEQYAUEByJ-wgxWOxpMV2w.png\" alt=\"Template literals\"></p>\n<p><strong>7. Multi-line Strings</strong>\nDeclaring a multi-line string works like a charm in ES6.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2284/1*dkA4Pza64rFgQmu4wAHA4A.png\"></p>\n<p>Thus these were some of the most commonly used ES6 syntax which helps a lot of times to make complex operations easy and consuming less lines in your code.\nTo know more about ES6 follow this <a href=\"http://es6-features.org/\">link</a>.</p>\n<p><em>Happy coding!</em> ðŸ–¥ ðŸ˜„</p>","timeToRead":2,"id":"4d4c00a5-f7eb-5104-b350-767497a0bc52","frontmatter":{"date":"December 24, 2017","title":"Quick walkthrough to the new ES6 syntax making developerâ€™s job easy","folder":"/blog/1-es6/","ogimage":{"childImageSharp":{"fixed":{"src":"/static/3b312fe46ffbdd5252efd749dcd51853/647de/es6.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/quick-walkthrough-to-the-new-es6-syntax-making-developers-job-easy"}}}